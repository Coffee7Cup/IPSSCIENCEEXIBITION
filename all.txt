 apiKey: "AIzaSyDOwuQBjOM1YL6o2hiW_OIA4Typw0vb4vw",
  authDomain: "ipsscienceexibition.firebaseapp.com",
  projectId: "ipsscienceexibition",
  storageBucket: "ipsscienceexibition.firebasestorage.app",
  messagingSenderId: "486200491667",
  appId: "1:486200491667:web:85cac72cb2b0839f175766",
  measurementId: "G-THQGFD4ZCK"

import React, { useState, useEffect } from 'react';
import { db, auth } from './firebase';
import { doc, setDoc } from 'firebase/firestore';
import { createUserWithEmailAndPassword, sendEmailVerification } from 'firebase/auth';
import { useNavigate, Link } from 'react-router-dom';
import { toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

const Signup = () => {
  const [salutation, setSalutation] = useState('');
  const [firstName, setFirstName] = useState('');
  const [lastName, setLastName] = useState('');
  const [email, setEmail] = useState('');
  const [mobile, setMobile] = useState('');
  const [whatsapp, setWhatsapp] = useState('');
  const [college, setCollege] = useState('');
  const [year, setYear] = useState('');
  const [branch, setBranch] = useState('');
  const [bloodGroup, setBloodGroup] = useState('');
  const [address, setAddress] = useState('');
  const [pincode, setPincode] = useState('');
  const [collegeAddress, setCollegeAddress] = useState('');
  const [collegePincode, setCollegePincode] = useState('');
  const [isMadhyaPradeshResident, setIsMadhyaPradeshResident] = useState(false);
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [answer, setAnswer] = useState('');
  const [num1, setNum1] = useState(Math.floor(Math.random() * 10));
  const [num2, setNum2] = useState(Math.floor(Math.random() * 10));
  const [correctAnswer, setCorrectAnswer] = useState(null);
  const navigate = useNavigate();

  useEffect(() => {
    setCorrectAnswer(Math.max(num1, num2));
  }, [num1, num2]);

  const validateInputs = () => {
    if (!/^\d{10}$/.test(mobile)) {
      toast.error('Invalid mobile number. Must be 10 digits.');
      return false;
    }
    if (!/^\d{6}$/.test(pincode)) {
      toast.error('Invalid pincode. Must be 6 digits.');
      return false;
    }if (!/\S+@\S+\.\S+/.test(email)) {
      toast.error('Please enter a valid email address.');
      return;
    }    

    return true;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
  
    // Basic input validation
    if (!salutation || !firstName || !lastName || !email || !mobile || !whatsapp || !college || !year || !branch || !bloodGroup || !address || !pincode || !collegeAddress || !collegePincode || !password || !confirmPassword || !answer) {
      toast.error('Please fill in all fields');
      return;
    }
  
    if (password !== confirmPassword) {
      toast.error('Passwords do not match');
      return;
    }
  
    if (parseInt(answer) !== correctAnswer) {
      toast.error('Incorrect answer. Please try again.');
      return;
    }
  
    // Validate mobile and pincode format
    if (!validateInputs()) {
      return;  // Stop execution if validation fails
    }
  
    try {
      // Create user with Firebase Authentication
      const userCredential = await createUserWithEmailAndPassword(auth, email, password);
      const user = userCredential.user;
    
      // Save user data to Firestore
      await setDoc(doc(db, 'users', user.uid), {
        salutation,
        firstName,
        lastName,
        email,
        mobile,
        whatsapp,
        college,
        year,
        branch,
        bloodGroup,
        address,
        pincode,
        collegeAddress,
        collegePincode,
        isMadhyaPradeshResident,
      });
    
      // Send email verification
      await sendEmailVerification(user);
    
      toast.success('Account created successfully! Please verify your email.');
      navigate('/login'); // Redirect to login page after showing the message.
    
    } catch (error) {
      console.error("Error during signup:", error);  // Log the error to the console for debugging
      if (error.code === 'auth/email-already-in-use') {
        toast.error('Email already in use. Please try again.');
      } else if (error.code === 'auth/weak-password') {
        toast.error('Password is too weak. Please try again.');
      } else {
        toast.error(`Error: ${error.message}`);  // Show the specific error message
      }
    }
       
  };
  
  
  

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-100">
      <div className="bg-white mt-8 p-8 rounded-lg shadow-lg w-full max-w-2xl">
        <h1 className="text-2xl font-bold text-center mb-6 text-primary">Signup</h1>
        <form onSubmit={handleSubmit} className="space-y-4">
        <div className="mb-4">
            <label className="block text-sm font-medium text-gray-700">Salutation:</label>
            <select value={salutation} onChange={(e) => setSalutation(e.target.value)} required className="w-full p-2 border border-gray-300 rounded">
              <option value="">Select Salutation</option>
              <option value="Mr.">Mr.</option>
              <option value="Ms.">Ms.</option>
              <option value="Mrs.">Mrs.</option>
            </select>
          </div>
          <div className="mb-4">
            <label className="block text-sm font-medium text-gray-700">First Name:</label>
            <input type="text" value={firstName} onChange={(e) => setFirstName(e.target.value)} required className="w-full p-2 border border-gray-300 rounded" />
          </div>
          <div className="mb-4">
            <label className="block text-sm font-medium text-gray-700">Last Name:</label>
            <input type="text" value={lastName} onChange={(e) => setLastName(e.target.value)} required className="w-full p-2 border border-gray-300 rounded" />
          </div>
          <div className="mb-4">
            <label className="block text-sm font-medium text-gray-700">Email:</label>
            <input type="email" value={email} onChange={(e) => setEmail(e.target.value)} required className="w-full p-2 border border-gray-300 rounded" />
          </div>
          <div className="mb-4">
            <label className="block text-sm font-medium text-gray-700">Mobile:</label>
            <input type="text" value={mobile} onChange={(e) => setMobile(e.target.value)} required className="w-full p-2 border border-gray-300 rounded" />
          </div>
          <div className="mb-4">
            <label className="block text-sm font-medium text-gray-700">WhatsApp:</label>
            <input type="text" value={whatsapp} onChange={(e) => setWhatsapp(e.target.value)} required className="w-full p-2 border border-gray-300 rounded" />
          </div>
          <div className="mb-4">
            <label className="block text-sm font-medium text-gray-700">College:</label>
            <input type="text" value={college} onChange={(e) => setCollege(e.target.value)} required className="w-full p-2 border border-gray-300 rounded" />
          </div>
          <div className="mb-4">
            <label className="block text-sm font-medium text-gray-700">Year:</label>
            <input type="text" value={year} onChange={(e) => setYear(e.target.value)} required className="w-full p-2 border border-gray-300 rounded" />
          </div>
          <div className="mb-4">
            <label className="block text-sm font-medium text-gray-700">Branch:</label>
            <input type="text" value={branch} onChange={(e) => setBranch(e.target.value)} required className="w-full p-2 border border-gray-300 rounded" />
          </div>
          <div className="mb-4">
            <label className="block text-sm font-medium text-gray-700">Blood Group:</label>
            <input type="text" value={bloodGroup} onChange={(e) => setBloodGroup(e.target.value)} required className="w-full p-2 border border-gray-300 rounded" />
          </div>
          <div className="mb-4">
            <label className="block text-sm font-medium text-gray-700">Address:</label>
            <input type="text" value={address} onChange={(e) => setAddress(e.target.value)} required className="w-full p-2 border border-gray-300 rounded" />
          </div>
          <div className="mb-4">
            <label className="block text-sm font-medium text-gray-700">Pincode:</label>
            <input type="text" value={pincode} onChange={(e) => setPincode(e.target.value)} required className="w-full p-2 border border-gray-300 rounded" />
          </div>
          <div className="mb-4">
            <label className="block text-sm font-medium text-gray-700">College Address:</label>
            <input type="text" value={collegeAddress} onChange={(e) => setCollegeAddress(e.target.value)} required className="w-full p-2 border border-gray-300 rounded" />
          </div>
          <div className="mb-4">
            <label className="block text-sm font-medium text-gray-700">College Pincode:</label>
            <input type="text" value={collegePincode} onChange={(e) => setCollegePincode(e.target.value)} required className="w-full p-2 border border-gray-300 rounded" />
          </div>
          <div className="mb-4">
            <label className="block text-sm font-medium text-gray-700 ">Are you a Madhya Pradesh resident?</label>
            <input type="checkbox" checked={isMadhyaPradeshResident} onChange={(e) => setIsMadhyaPradeshResident(e.target.checked)} className="mr-2" />
          </div>
          <div className="mb-4">
            <label className="block text-sm font-medium text-gray-700">Password:</label>
            <input type="password" value={password} onChange={(e) => setPassword(e.target.value)} required className="w-full p-2 border border-gray-300 rounded" />
          </div>
          <div className="mb-4">
            <label className="block text-sm font-medium text-gray-700">Confirm Password:</label>
            <input type="password" value={confirmPassword} onChange={(e) => setConfirmPassword(e.target.value)} required className="w-full p-2 border border-gray-300 rounded" />
          </div>
          <div className="mb-4">
            <label className="block text-sm font-medium text-gray-700">Which number is greater?</label>
            <p>{num1} or {num2}?</p>
            <input type="number" value={answer} onChange={(e) => setAnswer(e.target.value)} required className="w-full p-2 border border-gray-300 rounded" />
          </div>
          <button
            type="submit"
            className="w-full bg-primary text-white font-bold py-2 rounded-md hover:bg-primary-dark focus:outline-none focus:ring-2 focus:ring-primary focus:ring-opacity-50"
          >
            Sign Up
          </button>
        </form>
        <Link to="/login" className="block text-center mt-4 text-sm text-gray-600 hover:text-primary">
          Already have an account? Login here
        </Link>
      </div>
    </div>
  );
};

export default Signup;
